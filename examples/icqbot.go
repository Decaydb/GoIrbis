package main

import (
    "../src/irbis"
    "context"
    "encoding/json"
    "fmt"
    "github.com/mail-ru-im/bot-golang"
    "io/ioutil"
    "log"
    "net/http"
    "strings"
)

type BotConfig struct {
	Token string
	Host string
	Port int
	Database string
	User string
	Password string
}

func readConfig() BotConfig {
	bytes, err := ioutil.ReadFile("bot-config.json")
	if err != nil {
		log.Fatal(err)
	}
	var result BotConfig
	err = json.Unmarshal(bytes, &result)
	if err != nil {
		log.Fatal(err)
	}
	return result
}

func getConnection() *irbis.IrbisConnection {
	config := readConfig()
	result := irbis.IrbisConnection{}
	result.Host = config.Host
	result.Port = config.Port
	result.Database = config.Database
	result.Username = config.User
	result.Password = config.Password
	result.Workstation = "C"

	return &result
}

type Announce struct {
	Id string
	Name string
	Preview_Text string
	Detail_Picture string
	Property_Date_S1_Value string
	Property_Category_Value string
	Detail_Page_Url string
}

func getUrlText (url string) (content []byte, err error) {
	response, err2 := http.Get(url)
	if err2 != nil {
		err = err2
		log.Printf("Error getting url #{err2}")
		return
	}
	defer func () { _ = response.Body.Close() } ()
	content, err = ioutil.ReadAll(response.Body)
	return
}

func getAnnounces() (result []Announce, err error) {
	url := "http://irklib.ru/api"
	var content []byte
	content, err = getUrlText(url)
	if err != nil {
		return
	}

	err = json.Unmarshal(content, &result)
	return
}

func addButtons (message *botgolang.Message) {
	buttons := [][] botgolang.Button {
		{
			botgolang.NewCallbackButton("–ê–Ω–æ–Ω—Å—ã", "–ê–Ω–æ–Ω—Å—ã"),
			botgolang.NewCallbackButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
		},
		{
			botgolang.NewCallbackButton("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"),
			botgolang.NewCallbackButton("–ü–æ–º–æ—â—å", "–ü–æ–º–æ—â—å"),
		},
	}
	message.InlineKeyboard = buttons
}

func choose(first string, second string) string {
	if first == "" {
		return second
	}
	return first
}

func doAnnounces (bot *botgolang.Bot, chatId string, userId string) {
	announces, err := getAnnounces()

	if len(announces) == 0 {
		message := bot.NewTextMessage(chatId,
			"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–Ω–æ–Ω—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
		_ = message.Send()
		return
	}


	if err == nil {
		for i := range announces {
			announce := bot.NewTextMessage(choose(chatId, userId),
				announces[i].Preview_Text)
			if i == len(announces) - 1 {
				addButtons(announce)
			}
			_ = announce.Send()
		}
	}
}

func doStart (bot *botgolang.Bot, chatId string, userId string) {
	text := `–Ø —Å–∏–∂—É –≤ –ø–æ–¥–≤–∞–ª–µ —Å—Ä–µ–¥–∏ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∫–Ω–∏–≥.
–ú–æ–≥—É –Ω–∞–π—Ç–∏ –∫–Ω–∏–∂–∫—É, –º–æ–≥—É –Ω–µ –Ω–∞–π—Ç–∏ üòÅ`
	start := bot.NewTextMessage(choose(chatId, userId), text)
	addButtons(start)
	_ = start.Send()
}

func doContacts (bot *botgolang.Bot, chatId string, userId string) {
	text := `–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å: 664033, –≥. –ò—Ä–∫—É—Ç—Å–∫, —É–ª. –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞, 253
–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: library@irklib.ru
–ú–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: (3952) 48-66-80
–î–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–µ–º–Ω–æ–π: 705`
	contacts := bot.NewTextMessage(choose(chatId, userId), text)
	addButtons(contacts)
	_ = contacts.Send()
}

func doRegime (bot *botgolang.Bot, chatId string, userId string) {
	text := `–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:

–í–¢-–í–° 11.00-20.00 (–¥–æ 22.00 –≤ —Ä–µ–∂–∏–º–µ —á–∏—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–ª–∞)
–ü–ù - –≤—ã—Ö–æ–¥–Ω–æ–π,
–ø–æ—Å–ª–µ–¥–Ω—è—è –ø—è—Ç–Ω–∏—Ü–∞ –º–µ—Å—è—Ü–∞ - —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –¥–µ–Ω—å`
	regime := bot.NewTextMessage(choose(chatId, userId), text)
	addButtons(regime)
	_ = regime.Send()
}

func doHelp (bot *botgolang.Bot, chatId string, userId string) {
	text := `–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –µ—ë –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –±–æ—Ç –∏—â–µ—Ç –∫–Ω–∏–≥–∏ –∏–ª–∏ —Å—Ç–∞—Ç—å–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ. –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–º—à–∞), –∑–∞–≥–ª–∞–≤–∏–µ –∫–Ω–∏–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–æ–ª–æ–¥–Ω—ã–µ –∏–≥—Ä—ã) –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–∫—É–Ω–∏–Ω)
–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–µ—á–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏–π —Å–ª–æ–≤ (—á–µ—Ä–µ–º—à–∞ ‚Üí —á–µ—Ä–µ–º—à).`
	help := bot.NewTextMessage(choose(chatId, userId), text)
	addButtons(help)
	_ = help.Send()
}

func checkIrbisConnection() {
	connection := getConnection()
	if !connection.Connect() {
		log.Fatal("Can't connect")
	}
	log.Println("–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ò–†–ë–ò–°64")
	log.Println("\t–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö=", connection.Database)
	log.Println("\tMax MFN=", connection.GetMaxMfn(connection.Database))
	_ = connection.Disconnect()
}

func doSearch(bot *botgolang.Bot, message *botgolang.Message) {
	query := message.Text
	if strings.EqualFold(query, "/start") {
		doStart(bot, message.Chat.ID, "")
		return
	}
	if strings.EqualFold(query, "–∞–Ω–æ–Ω—Å—ã") ||
		strings.EqualFold(query, "/announces") {
		doAnnounces(bot, message.Chat.ID, "")
		return
	}
	if strings.EqualFold(query, "–∫–æ–Ω—Ç–∞–∫—Ç—ã") ||
		strings.EqualFold(query, "/contacts") {
		doContacts(bot, message.Chat.ID, "")
		return
	}
	if strings.EqualFold(query, "—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã") ||
		strings.EqualFold(query, "/regime") {
		doRegime(bot, message.Chat.ID, "")
		return
	}
	if strings.EqualFold(query, "–ø–æ–º–æ—â—å") ||
		strings.EqualFold(query, "/help") {
		doHelp(bot, message.Chat.ID, "")
		return
	}

	_ = message.Reply("–ò—â—É –∫–Ω–∏–≥–∏ –∏ —Å—Ç–∞—Ç—å–∏...")

	connection := getConnection()
	if !connection.Connect() {
		_ = message.Reply("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –ò–†–ë–ò–°")
		return
	}

	parameters := irbis.SearchParameters {
		Database: connection.Database,
		Expression: "\"K=" + query + "$\"",
		Format: "@brief",
		FirstRecord: 1,
		NumberOfRecords: 10,
	}

	found := connection.SearchEx(&parameters)
	if len(found) == 0 {
		reply := bot.NewTextMessage(message.Chat.ID,
			"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		addButtons(reply)
		_ = reply.Send()
	}
	for i := range found {
		book := bot.NewTextMessage(message.Chat.ID,
			found[i].Description)
		if i == len(found) - 1 {
			addButtons(book)
		}
		_ = book.Send()
	}

	_ = connection.Disconnect()
}

func doCallback(bot *botgolang.Bot, userId string, callback *botgolang.ButtonResponse) {
	callbackData := callback.CallbackData
	response := bot.NewButtonResponse(callback.QueryID, "", callbackData, false)
	_ = response.Send()

	if strings.EqualFold(callbackData, "/start") {
		doStart(bot, "", userId)
		return
	}
	if strings.EqualFold(callbackData, "–∞–Ω–æ–Ω—Å—ã") ||
		strings.EqualFold(callbackData, "/announces") {
		doAnnounces(bot, "", userId)
		return
	}
	if strings.EqualFold(callbackData, "–∫–æ–Ω—Ç–∞–∫—Ç—ã") ||
		strings.EqualFold(callbackData, "/contacts") {
		doContacts(bot, "", userId)
		return
	}
	if strings.EqualFold(callbackData, "—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã") ||
		strings.EqualFold(callbackData, "/regime") {
		doRegime(bot, "", userId)
		return
	}

	doHelp(bot, "", userId)
}

func runBot() {
	config := readConfig()
	bot, err := botgolang.NewBot(config.Token)
	if err != nil {
		log.Fatalf("cannot connect to bot: %s", err)
	}

	log.Println(bot.Info)

	ctx := context.Background()
	for {
		updates := bot.GetUpdatesChannel(ctx)
		for update := range updates {
			fmt.Println(update.Type, update.Payload)

			switch update.Type {
			case botgolang.NEW_MESSAGE:
				message := update.Payload.Message()
				go doSearch(bot, message)

			case botgolang.CALLBACK_QUERY:
				callback := update.Payload.CallbackQuery()
				userId := update.Payload.From.UserID
				go doCallback(bot, userId, callback)

			default:
				fmt.Println("Unknown message type")
			}
		}
	}
}


func main() {
	checkIrbisConnection()

	runBot()
}
